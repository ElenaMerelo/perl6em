#+latex_compiler: xelatex 
#+latex_header: \usepackage{libertine}
#+latex_header: \usepackage{unicode-math}

* Sessions
  
** Empathy session (30 minutes)
   :PROPERTIES:
   :Chapter:  0
   :Tools:    Pen and paper
   :END:

Took place Dec 6th, 11:30AM. 
** Ideas session (30 minutes)
   :PROPERTIES:
   :Chapter:  0
   :Tools:    Pen and paper
   :END:

Dec 8th, 11:00 AM. 

Let's go into the ideation phase, while not leaving the immersion phase http://www.mjvinnovation.com/blog/three-phases-design-thinking-immersion-ideation-prototyping

** Tools (30 minutes+)
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  1
   :END:

Set up tools, starting with the editor. Atom, emacs, anything like
that, command line, how to work with it, minimal Linux, which is the
environment of choice. 
** Perl 6 (30 minutes)
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  1
   :END:


Set it up, understand the REPL. 

Install rakudobrew and start to work with it. Class itself took like 15 minutes, and the rest was devoted to compiling latest version of MoarVM. Note: the $ in the documentation can be mistaken for a command. 

** What is free software (30 minutes)
   :PROPERTIES:
   :Tools:    Pen and paper 
   :Chapter:  1
   :END:

Probably a good talk for a Sunday morning. What is free software and
free licenses, what they mean, what it's like to create and produce
free software, why everything we do when learning a language should be
free so that other benefit from it.  

We are telling the story of Java, how it is about to become the cash
crop of Oracle who's attempting to ask for licenses, and what kind of
licenses here are and what we should do about it. 


** Teamwork with git (30 minutes)
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  1
   :END:

The first part of this session should be used to create an ID with
GitHub or, if that's created already, to create repositories that will
be used to host the assignments and other tests. We will also learn to
collaborate using Markdown. 

An issue in this session is to learn to use the correct license, or at
least a license, for the work that will be done. A side effect is to
learn and use GitHub as a place to look for code, and how to fork a
repository to work on it. Pull requests, if time allows, if it does
not, let's yield to the next session.

*** Actual development

Sign up for GitHub, create a repository and actually *do nothing* with
it. Look up Perl6 and other repos, and modify them and create pull
requests. 

Unexpected hurdles (actually I have found this before): giving the
repository a name, finding something to do a pull request, things like
that. 


** What we know so far
   :PROPERTIES:
   :Tools:    Pen and paper 
   :Chapter:  1
   :END:

Writeup of what we have learned so far and what we want to
learn. Probably "home" assignment. 


*** Actual development

 We have talked about free software, a bit about Perl6, a bit
 about teamwork... Some are getting impatient over the actual lack of
 learning Perl6. So we'll have to go to that soon. Also talked a bit
 about [[https://github.com/ajs/perl6-Math-Sequences][Working on a
 Library about sequences]]. A pull request that, BTW, was accepted
 just today, on Christmas Day.

*** Conclusions so far 

Maybe we are out-zenning a bit with doing 7 sessions
 without a real hint of what Perl6, or for that matter any other
 language, is about. 

** Let's work with the REPL
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  2
   :END:

First, do some basic stuff, calculator style. Then realize that you
can't go back to what we wrote before to correct or whatever; then
install linenoise with

#+BEGIN_SRC bash
zef install Linenoise
#+END_SRC

Explain Unicode and what it means for modern computing. Test some
Unicode codepoints. 

Play with operators for a while. 

Hint also at types and why ar they different and what it means for
operations. use =.WHAT=, as in


#+BEGIN_SRC perl6
π.WHAT
#+END_SRC

You'll have to find a way to type π. Probably a good option is to do
it inside emacs. But the most straightforward is to look for "unicode
symbols" in Google and copy/paste it. You can do the same with other Unicode symbols such as ⅓ or ⅕. 

*** Actual development

We have discovered that =rakudobrew= was not properly installed and had a lot of fun after configuring a Compose key in Gnome. [[https://help.ubuntu.com/community/ComposeKey][Here's how to do it.]]
We eventually did some simple operations, including working with
Unicode characters. Also accessing the Javascript REPL that is
included in Firefox, and checking out how some things work, and some
others, mainly including the funny Unicode characters, do not. 




** 9. Working with other kind of data
   :PROPERTIES:
   :Tools:    Laptop
   :Chapter:  2
   :END:

