Title: Perl 6, the music-less musical
Credit: Written by
Author: Charo & Elena & Cecilia & JJ Merelo
Draft date: 18/12/2016
Copyright:
    CC-BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/

This is a play about a family learning Perl6 and drawing lessons for life and programming and art and life. It is also about Perl 5 and Perl 6. It could be a coming-of-age story, except that this probably has already happened with Perl 6 or will never happen, depending on who you ask.

The play is intended for two actors, because that is how it is going to happen, no props except what is going to be projected in the screen; at least, I will try not to have more than two actors at the same time in the scene. If it positively needs a third one, it can be drawn from the public. Truly minimalistic, and intended for trade conferences and somesuch. There is going to be no courtain, except if we are able to find volunteers that act as such.

"I have endeavoured in this little play, to raise the butterfly of an Idea, which shall not put my readers out of humour with themselves, with each other, with coding, or with us".

===

#Version α

=Meet the actors and set up the problem. New languages are hard, people want to stick to old ones 

INT. OFFICE - DAY #1#

JJ is sitting in an office with a computer. He is wearing a Perl 5 tee, with camels or onions or something that cries out, quite clearly, that he's Perl 5 through and through. He is disheveled, hair in a shock, shaking the computer. 

SLIDE TO:
Slide shows perl6advent.wordpress.com/2015/12/07/day-7-unicode-perl-6-and-you/

JJ (reads aloud from the slide above)
"If you don’t want to work at a grapheme level, then you have several other string types to choose from: If you’re interested in working within a particular normalization, there’s the self-explanatory types of NFC, NFD, NFKC, and NFKD. If you just want to work with codepoints
and not bother with normalization, there’s the Uni string type (which may be most appropriate in cases where you don’t want the NFC normalization that comes with normal Str, and keep text as-is). And if you want to work at the binary level, well, there’s always the Blob family of types :) "

Leaves the computer on the table and messing with his hair, then holds his chin and wonders aloud.

JJ
Do I want to work at the grapheme level? What is a grapheme? What is KFC? Kentucky Fried Character? But it's NKFC, so it's not fried? Luckily, we have the Blob family of types! What is a Blob! Like the Hulk, but softer?

SLIDES TO:
the Hulk. 

JJ (still in dispair)
I just wanted to process a simple screen play in Fountain markdown!

SLIDES TO:
Screengrab of this play.

Camelia shows up, representing Perl 6. She's got a T-shirt with Camelia the Perl6 butterfly and is young and blonde and bubbly and has a magic wand in her hand. She is smiling and somersaults into the scene.

SLIDES TO:
Slide showing Camelia.

CAMELIA (shakes wand)
Hello, I am Camelia.

JJ (shaking head)
Well, that was unexpected.

CAMELIA (tut-tuts)
I am the FairyOps team leader. And I am going to tell you a story. It's a great story. Do you want to hear a nice and beautiful story?

JJ (pulling his hair)
But... But... I have to prepare this Fountain script and...

CAMELIA (shaking wand)
git push dash dash force story

JJ (stands up, rolls eyes)
OOOOOOOKEEEEEEEYYYYYYYY

They disappear from stage, and get props with cutouts from a camel and a butterfly, which will be used for projecting shadows into the screen. They have to move to a place where those shadows effectively work, or simply move the props. At any rate, they should change to black tees and caps to draw away attention from them.

SLIDES TO:
White screen for projection.

STORYTELLER
Once upon a time, there was a bedouin called Bab-el-Larry-ben-Wall, who created a camel to take care of the usual things that camels do, system administration and web programming.

Camel slides into view, and walks and up down.

STORYTELLER
Web was not invented yet, to the camel was not too busy. But then the web came, and web frameworks, and Booking, and Unicode, and the camel started to get bigger and bigger and even bigger.

Camel gets closer to light source, becoming bigger until it covers almost the whole screen.

STORYTELLER
So big, in fact, that, well, it was big. It was fast, and widely used, and respected, and helped Bab-el-Larry-ben-Wall and many others with a lot of stuff. But Bab-el-Larry-ben-Wall was not happy, and, in the spirit that later made people create Javascript framework every Tuesday, decided to create a new thing for biohacking and interestellar travel and brain dumps and many other things that did not exist yet but that when actually existing would break the camel back. Ah, and Unicode.

Butterfly flies in. Camelia shows up holding the butterfly, which is stuck to her magic wand. JJ walks in.

CAMELIA
And they lived happily ever after, the butterfly happier than the camel, because, you know, it's a butterfly, and no camelid is known for his happiness. And that is why you have to do all your stuff in Perl 6.

JJ
Bah! Humbug!

CAMELIA
You know, I was once like that. Pretty much. But now I'm into FairyOps and I have seen the light from the clouds. And you will see them also. Three spirits will haunt you the next three nights. The spirit of the beta version, the spirit of the first release candidate, and the spirit of the christmas when Perl 6 was eventually released, let's us all thank El-Larry-Ben-Wall or whatever.

She walks back and leave. JJ goes back to his computer, and continues pulling his hair.









#Version ß

=What has happened in the past and how this has caused the present

#Release Candidate 1

=What possible users are doing in the present.

#Release Candidate 2

=What will happen in the future if all goes the way it does.

#Version 1.0

=What we can do to change all that, a call to action. 
